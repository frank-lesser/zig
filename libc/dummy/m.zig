// This file exists to create a libm.so file so that LLD has something to look at
// and emit linker errors if an attempt to link against a non-existent C symbol happens.

export fn _LIB_VERSION() void {}
export fn __acos_finite() void {}
export fn __acosf128_finite() void {}
export fn __acosf_finite() void {}
export fn __acosh_finite() void {}
export fn __acoshf128_finite() void {}
export fn __acoshf_finite() void {}
export fn __acoshl_finite() void {}
export fn __acosl_finite() void {}
export fn __asin_finite() void {}
export fn __asinf128_finite() void {}
export fn __asinf_finite() void {}
export fn __asinl_finite() void {}
export fn __atan2_finite() void {}
export fn __atan2f128_finite() void {}
export fn __atan2f_finite() void {}
export fn __atan2l_finite() void {}
export fn __atanh_finite() void {}
export fn __atanhf128_finite() void {}
export fn __atanhf_finite() void {}
export fn __atanhl_finite() void {}
export fn __clog10() void {}
export fn __clog10f() void {}
export fn __clog10l() void {}
export fn __cosh_finite() void {}
export fn __coshf128_finite() void {}
export fn __coshf_finite() void {}
export fn __coshl_finite() void {}
export fn __exp10_finite() void {}
export fn __exp10f128_finite() void {}
export fn __exp10f_finite() void {}
export fn __exp10l_finite() void {}
export fn __exp2_finite() void {}
export fn __exp2f128_finite() void {}
export fn __exp2f_finite() void {}
export fn __exp2l_finite() void {}
export fn __exp_finite() void {}
export fn __expf128_finite() void {}
export fn __expf_finite() void {}
export fn __expl_finite() void {}
export fn __finite() void {}
export fn __finitef() void {}
export fn __finitef128() void {}
export fn __finitel() void {}
export fn __fmod_finite() void {}
export fn __fmodf128_finite() void {}
export fn __fmodf_finite() void {}
export fn __fmodl_finite() void {}
export fn __fpclassify() void {}
export fn __fpclassifyf() void {}
export fn __fpclassifyf128() void {}
export fn __fpclassifyl() void {}
export fn __gamma_r_finite() void {}
export fn __gammaf128_r_finite() void {}
export fn __gammaf_r_finite() void {}
export fn __gammal_r_finite() void {}
export fn __hypot_finite() void {}
export fn __hypotf128_finite() void {}
export fn __hypotf_finite() void {}
export fn __hypotl_finite() void {}
export fn __iscanonicall() void {}
export fn __iseqsig() void {}
export fn __iseqsigf() void {}
export fn __iseqsigf128() void {}
export fn __iseqsigl() void {}
export fn __isinff128() void {}
export fn __isnanf128() void {}
export fn __issignaling() void {}
export fn __issignalingf() void {}
export fn __issignalingf128() void {}
export fn __issignalingl() void {}
export fn __j0_finite() void {}
export fn __j0f128_finite() void {}
export fn __j0f_finite() void {}
export fn __j0l_finite() void {}
export fn __j1_finite() void {}
export fn __j1f128_finite() void {}
export fn __j1f_finite() void {}
export fn __j1l_finite() void {}
export fn __jn_finite() void {}
export fn __jnf128_finite() void {}
export fn __jnf_finite() void {}
export fn __jnl_finite() void {}
export fn __lgamma_r_finite() void {}
export fn __lgammaf128_r_finite() void {}
export fn __lgammaf_r_finite() void {}
export fn __lgammal_r_finite() void {}
export fn __log10_finite() void {}
export fn __log10f128_finite() void {}
export fn __log10f_finite() void {}
export fn __log10l_finite() void {}
export fn __log2_finite() void {}
export fn __log2f128_finite() void {}
export fn __log2f_finite() void {}
export fn __log2l_finite() void {}
export fn __log_finite() void {}
export fn __logf128_finite() void {}
export fn __logf_finite() void {}
export fn __logl_finite() void {}
export fn __pow_finite() void {}
export fn __powf128_finite() void {}
export fn __powf_finite() void {}
export fn __powl_finite() void {}
export fn __remainder_finite() void {}
export fn __remainderf128_finite() void {}
export fn __remainderf_finite() void {}
export fn __remainderl_finite() void {}
export fn __scalb_finite() void {}
export fn __scalbf_finite() void {}
export fn __scalbl_finite() void {}
export fn __signbit() void {}
export fn __signbitf() void {}
export fn __signbitf128() void {}
export fn __signbitl() void {}
export fn __signgam() void {}
export fn __sinh_finite() void {}
export fn __sinhf128_finite() void {}
export fn __sinhf_finite() void {}
export fn __sinhl_finite() void {}
export fn __sqrt_finite() void {}
export fn __sqrtf128_finite() void {}
export fn __sqrtf_finite() void {}
export fn __sqrtl_finite() void {}
export fn __y0_finite() void {}
export fn __y0f128_finite() void {}
export fn __y0f_finite() void {}
export fn __y0l_finite() void {}
export fn __y1_finite() void {}
export fn __y1f128_finite() void {}
export fn __y1f_finite() void {}
export fn __y1l_finite() void {}
export fn __yn_finite() void {}
export fn __ynf128_finite() void {}
export fn __ynf_finite() void {}
export fn __ynl_finite() void {}
export fn acos() void {}
export fn acosf() void {}
export fn acosf128() void {}
export fn acosf32() void {}
export fn acosf32x() void {}
export fn acosf64() void {}
export fn acosf64x() void {}
export fn acosh() void {}
export fn acoshf() void {}
export fn acoshf128() void {}
export fn acoshf32() void {}
export fn acoshf32x() void {}
export fn acoshf64() void {}
export fn acoshf64x() void {}
export fn acoshl() void {}
export fn acosl() void {}
export fn asin() void {}
export fn asinf() void {}
export fn asinf128() void {}
export fn asinf32() void {}
export fn asinf32x() void {}
export fn asinf64() void {}
export fn asinf64x() void {}
export fn asinh() void {}
export fn asinhf() void {}
export fn asinhf128() void {}
export fn asinhf32() void {}
export fn asinhf32x() void {}
export fn asinhf64() void {}
export fn asinhf64x() void {}
export fn asinhl() void {}
export fn asinl() void {}
export fn atan() void {}
export fn atan2() void {}
export fn atan2f() void {}
export fn atan2f128() void {}
export fn atan2f32() void {}
export fn atan2f32x() void {}
export fn atan2f64() void {}
export fn atan2f64x() void {}
export fn atan2l() void {}
export fn atanf() void {}
export fn atanf128() void {}
export fn atanf32() void {}
export fn atanf32x() void {}
export fn atanf64() void {}
export fn atanf64x() void {}
export fn atanh() void {}
export fn atanhf() void {}
export fn atanhf128() void {}
export fn atanhf32() void {}
export fn atanhf32x() void {}
export fn atanhf64() void {}
export fn atanhf64x() void {}
export fn atanhl() void {}
export fn atanl() void {}
export fn cabs() void {}
export fn cabsf() void {}
export fn cabsf128() void {}
export fn cabsf32() void {}
export fn cabsf32x() void {}
export fn cabsf64() void {}
export fn cabsf64x() void {}
export fn cabsl() void {}
export fn cacos() void {}
export fn cacosf() void {}
export fn cacosf128() void {}
export fn cacosf32() void {}
export fn cacosf32x() void {}
export fn cacosf64() void {}
export fn cacosf64x() void {}
export fn cacosh() void {}
export fn cacoshf() void {}
export fn cacoshf128() void {}
export fn cacoshf32() void {}
export fn cacoshf32x() void {}
export fn cacoshf64() void {}
export fn cacoshf64x() void {}
export fn cacoshl() void {}
export fn cacosl() void {}
export fn canonicalize() void {}
export fn canonicalizef() void {}
export fn canonicalizef128() void {}
export fn canonicalizef32() void {}
export fn canonicalizef32x() void {}
export fn canonicalizef64() void {}
export fn canonicalizef64x() void {}
export fn canonicalizel() void {}
export fn carg() void {}
export fn cargf() void {}
export fn cargf128() void {}
export fn cargf32() void {}
export fn cargf32x() void {}
export fn cargf64() void {}
export fn cargf64x() void {}
export fn cargl() void {}
export fn casin() void {}
export fn casinf() void {}
export fn casinf128() void {}
export fn casinf32() void {}
export fn casinf32x() void {}
export fn casinf64() void {}
export fn casinf64x() void {}
export fn casinh() void {}
export fn casinhf() void {}
export fn casinhf128() void {}
export fn casinhf32() void {}
export fn casinhf32x() void {}
export fn casinhf64() void {}
export fn casinhf64x() void {}
export fn casinhl() void {}
export fn casinl() void {}
export fn catan() void {}
export fn catanf() void {}
export fn catanf128() void {}
export fn catanf32() void {}
export fn catanf32x() void {}
export fn catanf64() void {}
export fn catanf64x() void {}
export fn catanh() void {}
export fn catanhf() void {}
export fn catanhf128() void {}
export fn catanhf32() void {}
export fn catanhf32x() void {}
export fn catanhf64() void {}
export fn catanhf64x() void {}
export fn catanhl() void {}
export fn catanl() void {}
export fn cbrt() void {}
export fn cbrtf() void {}
export fn cbrtf128() void {}
export fn cbrtf32() void {}
export fn cbrtf32x() void {}
export fn cbrtf64() void {}
export fn cbrtf64x() void {}
export fn cbrtl() void {}
export fn ccos() void {}
export fn ccosf() void {}
export fn ccosf128() void {}
export fn ccosf32() void {}
export fn ccosf32x() void {}
export fn ccosf64() void {}
export fn ccosf64x() void {}
export fn ccosh() void {}
export fn ccoshf() void {}
export fn ccoshf128() void {}
export fn ccoshf32() void {}
export fn ccoshf32x() void {}
export fn ccoshf64() void {}
export fn ccoshf64x() void {}
export fn ccoshl() void {}
export fn ccosl() void {}
export fn ceil() void {}
export fn ceilf() void {}
export fn ceilf128() void {}
export fn ceilf32() void {}
export fn ceilf32x() void {}
export fn ceilf64() void {}
export fn ceilf64x() void {}
export fn ceill() void {}
export fn cexp() void {}
export fn cexpf() void {}
export fn cexpf128() void {}
export fn cexpf32() void {}
export fn cexpf32x() void {}
export fn cexpf64() void {}
export fn cexpf64x() void {}
export fn cexpl() void {}
export fn cimag() void {}
export fn cimagf() void {}
export fn cimagf128() void {}
export fn cimagf32() void {}
export fn cimagf32x() void {}
export fn cimagf64() void {}
export fn cimagf64x() void {}
export fn cimagl() void {}
export fn clog() void {}
export fn clog10() void {}
export fn clog10f() void {}
export fn clog10f128() void {}
export fn clog10f32() void {}
export fn clog10f32x() void {}
export fn clog10f64() void {}
export fn clog10f64x() void {}
export fn clog10l() void {}
export fn clogf() void {}
export fn clogf128() void {}
export fn clogf32() void {}
export fn clogf32x() void {}
export fn clogf64() void {}
export fn clogf64x() void {}
export fn clogl() void {}
export fn conj() void {}
export fn conjf() void {}
export fn conjf128() void {}
export fn conjf32() void {}
export fn conjf32x() void {}
export fn conjf64() void {}
export fn conjf64x() void {}
export fn conjl() void {}
export fn copysign() void {}
export fn copysignf() void {}
export fn copysignf128() void {}
export fn copysignf32() void {}
export fn copysignf32x() void {}
export fn copysignf64() void {}
export fn copysignf64x() void {}
export fn copysignl() void {}
export fn cos() void {}
export fn cosf() void {}
export fn cosf128() void {}
export fn cosf32() void {}
export fn cosf32x() void {}
export fn cosf64() void {}
export fn cosf64x() void {}
export fn cosh() void {}
export fn coshf() void {}
export fn coshf128() void {}
export fn coshf32() void {}
export fn coshf32x() void {}
export fn coshf64() void {}
export fn coshf64x() void {}
export fn coshl() void {}
export fn cosl() void {}
export fn cpow() void {}
export fn cpowf() void {}
export fn cpowf128() void {}
export fn cpowf32() void {}
export fn cpowf32x() void {}
export fn cpowf64() void {}
export fn cpowf64x() void {}
export fn cpowl() void {}
export fn cproj() void {}
export fn cprojf() void {}
export fn cprojf128() void {}
export fn cprojf32() void {}
export fn cprojf32x() void {}
export fn cprojf64() void {}
export fn cprojf64x() void {}
export fn cprojl() void {}
export fn creal() void {}
export fn crealf() void {}
export fn crealf128() void {}
export fn crealf32() void {}
export fn crealf32x() void {}
export fn crealf64() void {}
export fn crealf64x() void {}
export fn creall() void {}
export fn csin() void {}
export fn csinf() void {}
export fn csinf128() void {}
export fn csinf32() void {}
export fn csinf32x() void {}
export fn csinf64() void {}
export fn csinf64x() void {}
export fn csinh() void {}
export fn csinhf() void {}
export fn csinhf128() void {}
export fn csinhf32() void {}
export fn csinhf32x() void {}
export fn csinhf64() void {}
export fn csinhf64x() void {}
export fn csinhl() void {}
export fn csinl() void {}
export fn csqrt() void {}
export fn csqrtf() void {}
export fn csqrtf128() void {}
export fn csqrtf32() void {}
export fn csqrtf32x() void {}
export fn csqrtf64() void {}
export fn csqrtf64x() void {}
export fn csqrtl() void {}
export fn ctan() void {}
export fn ctanf() void {}
export fn ctanf128() void {}
export fn ctanf32() void {}
export fn ctanf32x() void {}
export fn ctanf64() void {}
export fn ctanf64x() void {}
export fn ctanh() void {}
export fn ctanhf() void {}
export fn ctanhf128() void {}
export fn ctanhf32() void {}
export fn ctanhf32x() void {}
export fn ctanhf64() void {}
export fn ctanhf64x() void {}
export fn ctanhl() void {}
export fn ctanl() void {}
export fn daddl() void {}
export fn ddivl() void {}
export fn dmull() void {}
export fn drem() void {}
export fn dremf() void {}
export fn dreml() void {}
export fn dsubl() void {}
export fn erf() void {}
export fn erfc() void {}
export fn erfcf() void {}
export fn erfcf128() void {}
export fn erfcf32() void {}
export fn erfcf32x() void {}
export fn erfcf64() void {}
export fn erfcf64x() void {}
export fn erfcl() void {}
export fn erff() void {}
export fn erff128() void {}
export fn erff32() void {}
export fn erff32x() void {}
export fn erff64() void {}
export fn erff64x() void {}
export fn erfl() void {}
export fn exp() void {}
export fn exp10() void {}
export fn exp10f() void {}
export fn exp10f128() void {}
export fn exp10f32() void {}
export fn exp10f32x() void {}
export fn exp10f64() void {}
export fn exp10f64x() void {}
export fn exp10l() void {}
export fn exp2() void {}
export fn exp2f() void {}
export fn exp2f128() void {}
export fn exp2f32() void {}
export fn exp2f32x() void {}
export fn exp2f64() void {}
export fn exp2f64x() void {}
export fn exp2l() void {}
export fn expf() void {}
export fn expf128() void {}
export fn expf32() void {}
export fn expf32x() void {}
export fn expf64() void {}
export fn expf64x() void {}
export fn expl() void {}
export fn expm1() void {}
export fn expm1f() void {}
export fn expm1f128() void {}
export fn expm1f32() void {}
export fn expm1f32x() void {}
export fn expm1f64() void {}
export fn expm1f64x() void {}
export fn expm1l() void {}
export fn f32addf128() void {}
export fn f32addf32x() void {}
export fn f32addf64() void {}
export fn f32addf64x() void {}
export fn f32divf128() void {}
export fn f32divf32x() void {}
export fn f32divf64() void {}
export fn f32divf64x() void {}
export fn f32mulf128() void {}
export fn f32mulf32x() void {}
export fn f32mulf64() void {}
export fn f32mulf64x() void {}
export fn f32subf128() void {}
export fn f32subf32x() void {}
export fn f32subf64() void {}
export fn f32subf64x() void {}
export fn f32xaddf128() void {}
export fn f32xaddf64() void {}
export fn f32xaddf64x() void {}
export fn f32xdivf128() void {}
export fn f32xdivf64() void {}
export fn f32xdivf64x() void {}
export fn f32xmulf128() void {}
export fn f32xmulf64() void {}
export fn f32xmulf64x() void {}
export fn f32xsubf128() void {}
export fn f32xsubf64() void {}
export fn f32xsubf64x() void {}
export fn f64addf128() void {}
export fn f64addf64x() void {}
export fn f64divf128() void {}
export fn f64divf64x() void {}
export fn f64mulf128() void {}
export fn f64mulf64x() void {}
export fn f64subf128() void {}
export fn f64subf64x() void {}
export fn f64xaddf128() void {}
export fn f64xdivf128() void {}
export fn f64xmulf128() void {}
export fn f64xsubf128() void {}
export fn fabs() void {}
export fn fabsf() void {}
export fn fabsf128() void {}
export fn fabsf32() void {}
export fn fabsf32x() void {}
export fn fabsf64() void {}
export fn fabsf64x() void {}
export fn fabsl() void {}
export fn fadd() void {}
export fn faddl() void {}
export fn fdim() void {}
export fn fdimf() void {}
export fn fdimf128() void {}
export fn fdimf32() void {}
export fn fdimf32x() void {}
export fn fdimf64() void {}
export fn fdimf64x() void {}
export fn fdiml() void {}
export fn fdiv() void {}
export fn fdivl() void {}
export fn feclearexcept() void {}
export fn fedisableexcept() void {}
export fn feenableexcept() void {}
export fn fegetenv() void {}
export fn fegetexcept() void {}
export fn fegetexceptflag() void {}
export fn fegetmode() void {}
export fn fegetround() void {}
export fn feholdexcept() void {}
export fn feraiseexcept() void {}
export fn fesetenv() void {}
export fn fesetexcept() void {}
export fn fesetexceptflag() void {}
export fn fesetmode() void {}
export fn fesetround() void {}
export fn fetestexcept() void {}
export fn fetestexceptflag() void {}
export fn feupdateenv() void {}
export fn finite() void {}
export fn finitef() void {}
export fn finitel() void {}
export fn floor() void {}
export fn floorf() void {}
export fn floorf128() void {}
export fn floorf32() void {}
export fn floorf32x() void {}
export fn floorf64() void {}
export fn floorf64x() void {}
export fn floorl() void {}
export fn fma() void {}
export fn fmaf() void {}
export fn fmaf128() void {}
export fn fmaf32() void {}
export fn fmaf32x() void {}
export fn fmaf64() void {}
export fn fmaf64x() void {}
export fn fmal() void {}
export fn fmax() void {}
export fn fmaxf() void {}
export fn fmaxf128() void {}
export fn fmaxf32() void {}
export fn fmaxf32x() void {}
export fn fmaxf64() void {}
export fn fmaxf64x() void {}
export fn fmaxl() void {}
export fn fmaxmag() void {}
export fn fmaxmagf() void {}
export fn fmaxmagf128() void {}
export fn fmaxmagf32() void {}
export fn fmaxmagf32x() void {}
export fn fmaxmagf64() void {}
export fn fmaxmagf64x() void {}
export fn fmaxmagl() void {}
export fn fmin() void {}
export fn fminf() void {}
export fn fminf128() void {}
export fn fminf32() void {}
export fn fminf32x() void {}
export fn fminf64() void {}
export fn fminf64x() void {}
export fn fminl() void {}
export fn fminmag() void {}
export fn fminmagf() void {}
export fn fminmagf128() void {}
export fn fminmagf32() void {}
export fn fminmagf32x() void {}
export fn fminmagf64() void {}
export fn fminmagf64x() void {}
export fn fminmagl() void {}
export fn fmod() void {}
export fn fmodf() void {}
export fn fmodf128() void {}
export fn fmodf32() void {}
export fn fmodf32x() void {}
export fn fmodf64() void {}
export fn fmodf64x() void {}
export fn fmodl() void {}
export fn fmul() void {}
export fn fmull() void {}
export fn frexp() void {}
export fn frexpf() void {}
export fn frexpf128() void {}
export fn frexpf32() void {}
export fn frexpf32x() void {}
export fn frexpf64() void {}
export fn frexpf64x() void {}
export fn frexpl() void {}
export fn fromfp() void {}
export fn fromfpf() void {}
export fn fromfpf128() void {}
export fn fromfpf32() void {}
export fn fromfpf32x() void {}
export fn fromfpf64() void {}
export fn fromfpf64x() void {}
export fn fromfpl() void {}
export fn fromfpx() void {}
export fn fromfpxf() void {}
export fn fromfpxf128() void {}
export fn fromfpxf32() void {}
export fn fromfpxf32x() void {}
export fn fromfpxf64() void {}
export fn fromfpxf64x() void {}
export fn fromfpxl() void {}
export fn fsub() void {}
export fn fsubl() void {}
export fn gamma() void {}
export fn gammaf() void {}
export fn gammal() void {}
export fn getpayload() void {}
export fn getpayloadf() void {}
export fn getpayloadf128() void {}
export fn getpayloadf32() void {}
export fn getpayloadf32x() void {}
export fn getpayloadf64() void {}
export fn getpayloadf64x() void {}
export fn getpayloadl() void {}
export fn hypot() void {}
export fn hypotf() void {}
export fn hypotf128() void {}
export fn hypotf32() void {}
export fn hypotf32x() void {}
export fn hypotf64() void {}
export fn hypotf64x() void {}
export fn hypotl() void {}
export fn ilogb() void {}
export fn ilogbf() void {}
export fn ilogbf128() void {}
export fn ilogbf32() void {}
export fn ilogbf32x() void {}
export fn ilogbf64() void {}
export fn ilogbf64x() void {}
export fn ilogbl() void {}
export fn j0() void {}
export fn j0f() void {}
export fn j0f128() void {}
export fn j0f32() void {}
export fn j0f32x() void {}
export fn j0f64() void {}
export fn j0f64x() void {}
export fn j0l() void {}
export fn j1() void {}
export fn j1f() void {}
export fn j1f128() void {}
export fn j1f32() void {}
export fn j1f32x() void {}
export fn j1f64() void {}
export fn j1f64x() void {}
export fn j1l() void {}
export fn jn() void {}
export fn jnf() void {}
export fn jnf128() void {}
export fn jnf32() void {}
export fn jnf32x() void {}
export fn jnf64() void {}
export fn jnf64x() void {}
export fn jnl() void {}
export fn ldexp() void {}
export fn ldexpf() void {}
export fn ldexpf128() void {}
export fn ldexpf32() void {}
export fn ldexpf32x() void {}
export fn ldexpf64() void {}
export fn ldexpf64x() void {}
export fn ldexpl() void {}
export fn lgamma() void {}
export fn lgamma_r() void {}
export fn lgammaf() void {}
export fn lgammaf128() void {}
export fn lgammaf128_r() void {}
export fn lgammaf32() void {}
export fn lgammaf32_r() void {}
export fn lgammaf32x() void {}
export fn lgammaf32x_r() void {}
export fn lgammaf64() void {}
export fn lgammaf64_r() void {}
export fn lgammaf64x() void {}
export fn lgammaf64x_r() void {}
export fn lgammaf_r() void {}
export fn lgammal() void {}
export fn lgammal_r() void {}
export fn llogb() void {}
export fn llogbf() void {}
export fn llogbf128() void {}
export fn llogbf32() void {}
export fn llogbf32x() void {}
export fn llogbf64() void {}
export fn llogbf64x() void {}
export fn llogbl() void {}
export fn llrint() void {}
export fn llrintf() void {}
export fn llrintf128() void {}
export fn llrintf32() void {}
export fn llrintf32x() void {}
export fn llrintf64() void {}
export fn llrintf64x() void {}
export fn llrintl() void {}
export fn llround() void {}
export fn llroundf() void {}
export fn llroundf128() void {}
export fn llroundf32() void {}
export fn llroundf32x() void {}
export fn llroundf64() void {}
export fn llroundf64x() void {}
export fn llroundl() void {}
export fn log() void {}
export fn log10() void {}
export fn log10f() void {}
export fn log10f128() void {}
export fn log10f32() void {}
export fn log10f32x() void {}
export fn log10f64() void {}
export fn log10f64x() void {}
export fn log10l() void {}
export fn log1p() void {}
export fn log1pf() void {}
export fn log1pf128() void {}
export fn log1pf32() void {}
export fn log1pf32x() void {}
export fn log1pf64() void {}
export fn log1pf64x() void {}
export fn log1pl() void {}
export fn log2() void {}
export fn log2f() void {}
export fn log2f128() void {}
export fn log2f32() void {}
export fn log2f32x() void {}
export fn log2f64() void {}
export fn log2f64x() void {}
export fn log2l() void {}
export fn logb() void {}
export fn logbf() void {}
export fn logbf128() void {}
export fn logbf32() void {}
export fn logbf32x() void {}
export fn logbf64() void {}
export fn logbf64x() void {}
export fn logbl() void {}
export fn logf() void {}
export fn logf128() void {}
export fn logf32() void {}
export fn logf32x() void {}
export fn logf64() void {}
export fn logf64x() void {}
export fn logl() void {}
export fn lrint() void {}
export fn lrintf() void {}
export fn lrintf128() void {}
export fn lrintf32() void {}
export fn lrintf32x() void {}
export fn lrintf64() void {}
export fn lrintf64x() void {}
export fn lrintl() void {}
export fn lround() void {}
export fn lroundf() void {}
export fn lroundf128() void {}
export fn lroundf32() void {}
export fn lroundf32x() void {}
export fn lroundf64() void {}
export fn lroundf64x() void {}
export fn lroundl() void {}
export fn matherr() void {}
export fn modf() void {}
export fn modff() void {}
export fn modff128() void {}
export fn modff32() void {}
export fn modff32x() void {}
export fn modff64() void {}
export fn modff64x() void {}
export fn modfl() void {}
export fn nan() void {}
export fn nanf() void {}
export fn nanf128() void {}
export fn nanf32() void {}
export fn nanf32x() void {}
export fn nanf64() void {}
export fn nanf64x() void {}
export fn nanl() void {}
export fn nearbyint() void {}
export fn nearbyintf() void {}
export fn nearbyintf128() void {}
export fn nearbyintf32() void {}
export fn nearbyintf32x() void {}
export fn nearbyintf64() void {}
export fn nearbyintf64x() void {}
export fn nearbyintl() void {}
export fn nextafter() void {}
export fn nextafterf() void {}
export fn nextafterf128() void {}
export fn nextafterf32() void {}
export fn nextafterf32x() void {}
export fn nextafterf64() void {}
export fn nextafterf64x() void {}
export fn nextafterl() void {}
export fn nextdown() void {}
export fn nextdownf() void {}
export fn nextdownf128() void {}
export fn nextdownf32() void {}
export fn nextdownf32x() void {}
export fn nextdownf64() void {}
export fn nextdownf64x() void {}
export fn nextdownl() void {}
export fn nexttoward() void {}
export fn nexttowardf() void {}
export fn nexttowardl() void {}
export fn nextup() void {}
export fn nextupf() void {}
export fn nextupf128() void {}
export fn nextupf32() void {}
export fn nextupf32x() void {}
export fn nextupf64() void {}
export fn nextupf64x() void {}
export fn nextupl() void {}
export fn pow() void {}
export fn pow10() void {}
export fn pow10f() void {}
export fn pow10l() void {}
export fn powf() void {}
export fn powf128() void {}
export fn powf32() void {}
export fn powf32x() void {}
export fn powf64() void {}
export fn powf64x() void {}
export fn powl() void {}
export fn remainder() void {}
export fn remainderf() void {}
export fn remainderf128() void {}
export fn remainderf32() void {}
export fn remainderf32x() void {}
export fn remainderf64() void {}
export fn remainderf64x() void {}
export fn remainderl() void {}
export fn remquo() void {}
export fn remquof() void {}
export fn remquof128() void {}
export fn remquof32() void {}
export fn remquof32x() void {}
export fn remquof64() void {}
export fn remquof64x() void {}
export fn remquol() void {}
export fn rint() void {}
export fn rintf() void {}
export fn rintf128() void {}
export fn rintf32() void {}
export fn rintf32x() void {}
export fn rintf64() void {}
export fn rintf64x() void {}
export fn rintl() void {}
export fn round() void {}
export fn roundeven() void {}
export fn roundevenf() void {}
export fn roundevenf128() void {}
export fn roundevenf32() void {}
export fn roundevenf32x() void {}
export fn roundevenf64() void {}
export fn roundevenf64x() void {}
export fn roundevenl() void {}
export fn roundf() void {}
export fn roundf128() void {}
export fn roundf32() void {}
export fn roundf32x() void {}
export fn roundf64() void {}
export fn roundf64x() void {}
export fn roundl() void {}
export fn scalb() void {}
export fn scalbf() void {}
export fn scalbl() void {}
export fn scalbln() void {}
export fn scalblnf() void {}
export fn scalblnf128() void {}
export fn scalblnf32() void {}
export fn scalblnf32x() void {}
export fn scalblnf64() void {}
export fn scalblnf64x() void {}
export fn scalblnl() void {}
export fn scalbn() void {}
export fn scalbnf() void {}
export fn scalbnf128() void {}
export fn scalbnf32() void {}
export fn scalbnf32x() void {}
export fn scalbnf64() void {}
export fn scalbnf64x() void {}
export fn scalbnl() void {}
export fn setpayload() void {}
export fn setpayloadf() void {}
export fn setpayloadf128() void {}
export fn setpayloadf32() void {}
export fn setpayloadf32x() void {}
export fn setpayloadf64() void {}
export fn setpayloadf64x() void {}
export fn setpayloadl() void {}
export fn setpayloadsig() void {}
export fn setpayloadsigf() void {}
export fn setpayloadsigf128() void {}
export fn setpayloadsigf32() void {}
export fn setpayloadsigf32x() void {}
export fn setpayloadsigf64() void {}
export fn setpayloadsigf64x() void {}
export fn setpayloadsigl() void {}
export fn signgam() void {}
export fn significand() void {}
export fn significandf() void {}
export fn significandl() void {}
export fn sin() void {}
export fn sincos() void {}
export fn sincosf() void {}
export fn sincosf128() void {}
export fn sincosf32() void {}
export fn sincosf32x() void {}
export fn sincosf64() void {}
export fn sincosf64x() void {}
export fn sincosl() void {}
export fn sinf() void {}
export fn sinf128() void {}
export fn sinf32() void {}
export fn sinf32x() void {}
export fn sinf64() void {}
export fn sinf64x() void {}
export fn sinh() void {}
export fn sinhf() void {}
export fn sinhf128() void {}
export fn sinhf32() void {}
export fn sinhf32x() void {}
export fn sinhf64() void {}
export fn sinhf64x() void {}
export fn sinhl() void {}
export fn sinl() void {}
export fn sqrt() void {}
export fn sqrtf() void {}
export fn sqrtf128() void {}
export fn sqrtf32() void {}
export fn sqrtf32x() void {}
export fn sqrtf64() void {}
export fn sqrtf64x() void {}
export fn sqrtl() void {}
export fn tan() void {}
export fn tanf() void {}
export fn tanf128() void {}
export fn tanf32() void {}
export fn tanf32x() void {}
export fn tanf64() void {}
export fn tanf64x() void {}
export fn tanh() void {}
export fn tanhf() void {}
export fn tanhf128() void {}
export fn tanhf32() void {}
export fn tanhf32x() void {}
export fn tanhf64() void {}
export fn tanhf64x() void {}
export fn tanhl() void {}
export fn tanl() void {}
export fn tgamma() void {}
export fn tgammaf() void {}
export fn tgammaf128() void {}
export fn tgammaf32() void {}
export fn tgammaf32x() void {}
export fn tgammaf64() void {}
export fn tgammaf64x() void {}
export fn tgammal() void {}
export fn totalorder() void {}
export fn totalorderf() void {}
export fn totalorderf128() void {}
export fn totalorderf32() void {}
export fn totalorderf32x() void {}
export fn totalorderf64() void {}
export fn totalorderf64x() void {}
export fn totalorderl() void {}
export fn totalordermag() void {}
export fn totalordermagf() void {}
export fn totalordermagf128() void {}
export fn totalordermagf32() void {}
export fn totalordermagf32x() void {}
export fn totalordermagf64() void {}
export fn totalordermagf64x() void {}
export fn totalordermagl() void {}
export fn trunc() void {}
export fn truncf() void {}
export fn truncf128() void {}
export fn truncf32() void {}
export fn truncf32x() void {}
export fn truncf64() void {}
export fn truncf64x() void {}
export fn truncl() void {}
export fn ufromfp() void {}
export fn ufromfpf() void {}
export fn ufromfpf128() void {}
export fn ufromfpf32() void {}
export fn ufromfpf32x() void {}
export fn ufromfpf64() void {}
export fn ufromfpf64x() void {}
export fn ufromfpl() void {}
export fn ufromfpx() void {}
export fn ufromfpxf() void {}
export fn ufromfpxf128() void {}
export fn ufromfpxf32() void {}
export fn ufromfpxf32x() void {}
export fn ufromfpxf64() void {}
export fn ufromfpxf64x() void {}
export fn ufromfpxl() void {}
export fn y0() void {}
export fn y0f() void {}
export fn y0f128() void {}
export fn y0f32() void {}
export fn y0f32x() void {}
export fn y0f64() void {}
export fn y0f64x() void {}
export fn y0l() void {}
export fn y1() void {}
export fn y1f() void {}
export fn y1f128() void {}
export fn y1f32() void {}
export fn y1f32x() void {}
export fn y1f64() void {}
export fn y1f64x() void {}
export fn y1l() void {}
export fn yn() void {}
export fn ynf() void {}
export fn ynf128() void {}
export fn ynf32() void {}
export fn ynf32x() void {}
export fn ynf64() void {}
export fn ynf64x() void {}
export fn ynl() void {}
